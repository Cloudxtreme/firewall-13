# Egress exceptions for macmini
declare -a MACMINI_TCP="(21,22,43 25,110,143,993 1119,1863,3724,4585,5222,5223,5900:5910,6112,8009,8085,8160,8888,9390:9393)"
declare -a MACMINI_UDP="(53,123,161 3784,6100,8004)"
declare -a MACMINI_ICMP="(echo-request echo-reply destination-unreachable source-quench)"
declare -a MACMINI_ICMP6="(destination-unreachable packet-too-big time-exceeded \
parameter-problem echo-request echo-reply router-solicitation router-advertisement \
neighbour-solicitation neighbour-advertisement redirect 141 142 148 149)"
MACMINI_ADDR="172.16.100.4/32"
MACMINI_ADDR6="2001:470:bbde:a20a::/64"
MACMINI_IF="eth1.100"
CHAIN="MACMINI"
function macmini {
    # Create new chain
    "${IPTABLES}" -N "${CHAIN}"
    # TCP
    for tcp in "${MACMINI_TCP[@]}"
    do
        "${IPTABLES}" -A "${CHAIN}" -i "${MACMINI_IF}" -o "${EXTIF}" -s "${MACMINI_ADDR}" -p tcp -m multiport --dports "${tcp}" -m state --state NEW -j ACCEPT
    done
    unset tcp
    # UDP
    for udp in "${MACMINI_UDP[@]}"
    do
        "${IPTABLES}" -A "${CHAIN}" -i "${MACMINI_IF}" -o "${EXTIF}" -s "${MACMINI_ADDR}" -p udp -m multiport --dports "${udp}" -j ACCEPT
        "${IPTABLES}" -A "${CHAIN}" -o "${MACMINI_IF}" -i "${EXTIF}" -d "${MACMINI_ADDR}" -p udp -m multiport --sports "${udp}" -j ACCEPT
    done
    unset udp
    # ICMP
    for icmp in "${MACMINI_ICMP[@]}"
    do
        "${IPTABLES}" -A "${CHAIN}" -i "${MACMINI_IF}" -o "${EXTIF}" -s "${MACMINI_ADDR}" -p icmp --icmp-type "${icmp}" -j ACCEPT
        "${IPTABLES}" -A "${CHAIN}" -o "${MACMINI_IF}" -i "${EXTIF}" -d "${MACMINI_ADDR}" -p icmp --icmp-type "${icmp}" -j ACCEPT
    done
    unset icmp
    # Return to the default FORWARD chain
    "${IPTABLES}" -A "${CHAIN}" -j RETURN
    # Append VLAN chain to the FORWARD table
    "${IPTABLES}" -A FORWARD -j "${CHAIN}"
    # Unset variables
}
function ipv6_macmini {
    # Create new chain
    "${IP6TABLES}" -N "${CHAIN}"
    # TCP
    for tcp in "${MACMINI_TCP[@]}"
    do
        "${IP6TABLES}" -A "${CHAIN}" -i "${MACMINI_IF}" -o "${IPV6_EXTIF}" -s "${MACMINI_ADDR6}" -p tcp -m multiport --dports "${tcp}" -m state --state NEW -j ACCEPT
    done
    unset tcp
    # UDP
    for udp in "${MACMINI_UDP[@]}"
    do
        "${IP6TABLES}" -A "${CHAIN}" -i "${MACMINI_IF}" -o "${IPV6_EXTIF}" -s "${MACMINI_ADDR6}" -p udp -m multiport --dports "${udp}" -j ACCEPT
        "${IP6TABLES}" -A "${CHAIN}" -o "${MACMINI_IF}" -i "${IPV6_EXTIF}" -d "${MACMINI_ADDR6}" -p udp -m multiport --sports "${udp}" -j ACCEPT
    done
    unset udp
    # ICMP
    for icmpv6 in "${MACMINI_ICMP6[@]}"
    do
        "${IP6TABLES}" -A "${CHAIN}" -i "${MACMINI_IF}" -o "${IPV6_EXTIF}" -s "${MACMINI_ADDR6}" -p icmpv6 --icmpv6-type "${icmpv6}" -j ACCEPT
        "${IP6TABLES}" -A "${CHAIN}" -o "${MACMINI_IF}" -i "${IPV6_EXTIF}" -d "${MACMINI_ADDR6}" -p icmpv6 --icmpv6-type "${icmpv6}" -j ACCEPT
    done
    unset icmpv6
    # Return to the default FORWARD chain
    "${IP6TABLES}" -A "${CHAIN}" -j RETURN
    # Append VLAN chain to the FORWARD table
    "${IP6TABLES}" -A FORWARD -j "${CHAIN}"
    # Unset variables
}
macmini
if [ "${IPV6}" -eq 1 ]
then
    ipv6_macmini
    # Unset variables
    unset MACMINI_ICMP6 MACMINI_ADDR6
fi
# Unset variables
unset MACMINI_TCP MACMINI_UDP MACMINI_ICMP MACMINI_ADDR MACMINI_IF CHAIN
